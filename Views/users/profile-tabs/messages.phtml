<?php
    $messageInfo = Authentication::User()->messageSlimfo();
?>
<div class="col-12">
    <h3 class="profile-name mb-3">Messages</h3>
    <!--List Users-->
    <div class="row">
        <div class="col-4 p-0">
            <div class="list-group" id="messages-tab" role="tablist">
            </div>
        </div>

        <!--List Messages For Each User-->
        <div class="col-8 p-0 message-display-area d-flex flex-column" id="messages">
            <div class="tab-content" id="content">
                <div class="tab-pane fade show" id="messageDisplay">
                </div>
                <div class="typing-indicator hide" id="type-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <div class="tab-pane fade show full" id="loading">
                    <div class="d-flex justify-content-center align-items-center h-100">
                        <div class="spinner-border text-primary spin" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="d-flex flex-row m-0 message-area align-items-start mt-auto bottom">
                <form method="post" class="d-block w-100" id="send-message">
                    <textarea class="message-input" rows="1" name="message" placeholder="Type a message..." id="msg-input" disabled></textarea>
                </form>
                <button id="sendMessage" class="ml-auto message-submit"><i class="far fa-paper-plane"></i></button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", async () => {
        const state = {};
        // Send request to get user on loading
        const res = await fetch("../requests/auth/me");
        const json = await res.json();
        state.user = json.user;

        await displaySlimfos();

        async function displaySlimfos() {
            const sres = await fetch("../requests/messages/slimfo");
            const sjson = await sres.json();
            state.slimfo = sjson.info;

            $("#messages-tab")[0].innerHTML = "";
            const messagesTab = $("#messages-tab");
            for (let info of state.slimfo) {
                let displayName = info.display_name || info.first_name + " " + info.last_name;

                let htmlString = `
                    <a href="#" id="${info.user_id}" class="list-group-item list-group-item-action" data-toggle="list" role="tab">
                        <div class="d-flex flex-row">
                            <h6 class="m-0">${displayName}</h6>`;

                if (info.Unread > 0) {
                    htmlString += `<span class="badge badge-warning ml-auto">${info.Unread}</span>`
                }
                htmlString += `
                        </div>
                        <p class="small text-muted m-0 mt-3 message-display-date">${info.latest}</p>
                    </a>`;
                messagesTab.append(htmlString);
            }
            setupListeners();
        }

        let channelName = null;
        let toUserId = null;
        let typing = false;
        let otherTyping = false;

        let pusher = new Pusher("8f49b51adc7ccf8e85a4", {
            cluster: "eu",
            forceTLS: true,
        });

        let notifChannel = pusher.subscribe(`msg-to-${state.user.id}`);
        notifChannel.bind("new-msg", (data) => {
            console.log("new message from " + data.userFrom);
            if (toUserId !== data.userFrom) {
                displaySlimfos();
            }
            let audio = new Audio("../sounds/message.wav");
            audio.play();
        });

        function setupListeners() {
            $(".list-group-item").click(function() {
                $("#msg-input").removeAttr("disabled");

                // If the user is not the current selected user
                if (toUserId !== this.id) {

                    // Reset the message box, set the user to not typing and
                    // get the to users' id
                    document.getElementById("msg-input").value = "";
                    typing = false;
                    toUserId = this.id;
                    otherTyping = false;

                    // Remove the unread badges
                    $(`#${toUserId} .badge`).remove();

                    // Send all the read messages to the server
                    fetch(`../requests/messages/read/${toUserId}`);

                    // Fade out the typing indicator as it is a new user
                    $("#type-indicator").fadeOut();

                    // console.log(`pusher, started listening on <messages-${state.user.id}>`);
                    // If the app is currently already listening for changes, unsubscribe and
                    // subscribe to a new message channel
                    if (channelName) {
                        pusher.unsubscribe(channelName);
                    }
                    channelName = `msg-to-${state.user.id}-from-${toUserId}`;
                    let channel = pusher.subscribe(channelName);

                    // Listen for the typing from event and respond
                    channel.bind("other-type", function(data) {
                        let indicator = $("#type-indicator");
                        // console.log(data);

                        // If the user is typing, fade in the little typing
                        // indicator, otherwise fade out
                        if (data.typing) {
                            indicator.fadeIn().css("display", "table");

                            // Scroll down so that the indicator is visible
                            otherTyping = true;
                            scrollToContent();
                        } else {

                            // User has stopped typing, fade out the indicator
                            otherTyping = false;
                            indicator.fadeOut();
                        }
                    });

                    // Listen for the new message event
                    channel.bind("new-msg", function(data) {
                        // Fade out any typing as assume the other user has sent the message
                        $("#type-indicator").fadeOut();
                        otherTyping = false;

                        // Remove the sent icon from any messages and next one is
                        // from another user
                        $("#sent-icon").remove();

                        // Construct the message div
                        let htmlString = `
                        <div class="msg-container">
                            <img src="${data.userFrom.display_pic}" alt="profile picture" class="user-thumbnail ml-2">
                            <div class="msg">
                                <p class="m-body m-0">${data.message.body}</p>
                                <span class="text-muted m-date small">${data.message.timestamp}</span>
                            </div>
                        </div>
                    `;

                        $("#msg-content").append(htmlString);
                        scrollToContent();
                    });

                    // Get the actual messages and display them
                    getMessages();
                }
            });
        }

        $("#msg-input").focus(() => {
            // On focus
            // console.log("focus");
            $(document).on("keyup", handleKeyDown);
        });

        $("#msg-input").blur(() => {
            // On unfocus
            // console.log("unfocus");
            $(document).off("keyup", handleKeyDown);
        });

        async function handleKeyDown(e) {
            // Send typing to server
            const messageBox = document.getElementById("msg-input");

            // If there is no user id set, bail
            if (!toUserId) {
                return;
            }

            // If the enter key is pressed and there is a message to send,
            // SEND IT YO, wait, and then scroll to content
            if (e.key === "Enter" && messageBox.value.trim() !== "") {
                const messageSent = await sendMessage();
                scrollToContent();
                return;
            }

            // If the user has not started typing and there is a value in the box
            // Send the new typing request to the server,
            // Checking this prevents sending the new request everytime a key is pressed
            if (!typing && messageBox.value) {
                // console.log("typing");
                // URL form encoded string with the from and typing attribute
                let body = `from=${state.user.id}&typing=true`;
                typing = true;

                const res = await fetch(`../requests/Messages/typing/${toUserId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: body
                });
                const json = await res.json();
                // console.log(json);

            } else if (typing && !messageBox.value) {
                // If the user is currently typing but there is no values left in the
                // box, the user has stopped typing, send the requests
                // console.log("stopped typing");
                let body = `from=${state.user.id}&typing=false`;
                typing = false;

                const res = await fetch(`../requests/Messages/typing/${toUserId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: body
                });
                const json = await res.json();
                console.log(json);
            }
        }

        let messages = {};

        async function getMessages() {
            const loading = $("#loading");
            const messageDisplay = $("#messageDisplay");

            // Fade in the loading indicator and fade out any current message
            // displays
            messageDisplay.fadeOut();
            loading.fadeIn();

            // Set the messageDisplay to nothing, delete any previous messages
            messageDisplay[0].innerHTML = "";


            // Fetch the conversation array from the server
            const res = await fetch(`../requests/messages/conversation/${toUserId}`);
            const json = await res.json();

            // Get the data as well as any other data that is needed
            messages = json.messages;
            let userFrom = json.userFrom;

            // Display name or if not available, fname + sname
            let displayName = userFrom.display_name || userFrom.first_name + " " + userFrom.last_name;
            // console.log(json);


            // Construct the messages
            let htmlString = `
                <div class="message d-flex flex-column" id="msg-content">
                    <div class="message-header sticky-top text-center">
                        <a href="view.php?id=${userFrom.id}">${displayName}</a>
                    </div>
            `;
            for (let message of messages) {
                if (message.own) {
                    // Message is own
                    htmlString += `
                        <div class="msg-container self">
                            <div class="msg self">
                                <p class="m-body m-0">${message.body}</p>
                                <span class="text-muted m-date small">${message.timestamp}</span>
                            </div>
                    `;

                    // If the message is the last message AND
                    // it has been read, add the avatar, otherwise add a sent icon
                    if (messages.indexOf(message) === messages.length-1 && message.read) {
                        htmlString += `<img src="${userFrom.display_pic}" alt="profile picture" class="user-thumbnail tiny" id="sent-icon">`;
                    } else if (messages.indexOf(message) === messages.length-1) {
                        htmlString += `<i class="fas fa-check-circle sent-icon" id="sent-icon"></i>`;
                    }

                    htmlString += "</div>";

                } else {
                    // Message is from other user, avatar and timestamp
                    htmlString += `
                        <div class="msg-container">
                            <img src="${userFrom.display_pic}" alt="profile picture" class="user-thumbnail ml-2">
                            <div class="msg">
                                <p class="m-body m-0">${message.body}</p>
                                <span class="text-muted m-date small">${message.timestamp}</span>
                            </div>
                        </div>
                    `;
                }
            }

            // End the container and append the string
            htmlString += "</div>";
            messageDisplay.append(htmlString);

            // Fade in the messages and fade out the loading symbol
            messageDisplay.fadeIn();
            loading.fadeOut();

            scrollToContent();
        }

        function scrollToContent(){
            // Scroll down to messages
            let content = $("#content");
            content.scrollTop(content.prop("scrollHeight"));
        }

        async function sendMessage() {
            const messageBox = document.getElementById("msg-input");
            let message = messageBox.value.trim();

            // Remove the sent icon from the old messages and
            // append the new message classes with the body and now
            // BEFORE THE REQUEST
            $("#sent-icon").remove();
            let htmlString = `
                        <div class="msg-container self">
                            <div class="msg self">
                                <p class="m-body m-0">${message}</p>
                                <span class="text-muted m-date small">now</span>
                            </div>
                            <i class="fas fa-check-circle sent-icon" id="sent-icon"></i>
                        </div>
                    `;
            $("#msg-content").append(htmlString);

            // Remove the messageBox value
            // Set the form-encoded body
            messageBox.value = "";
            let body = `to=${toUserId}&from=${state.user.id}&message=${message}&read=${otherTyping}`;

            // Send a new request to add the message to the database
            const res = await fetch("../requests/messages/new", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                },
                body: body,
            });
            const json = await res.json();

            // If the message has already been read, replace the sent icon with the display picture
            if (json.message.read) {
                $("#sent-icon").replaceWith(`<img src="${json.userTo.display_pic}" alt="profile picture" class="user-thumbnail tiny" id="sent-icon">`);
            }
            return json.message;
        }

    }, false)
</script>