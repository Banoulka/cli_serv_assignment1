<a tabindex="0" class="btn" data-toggle="popover" role="button"><i class="fas fa-bell"></i>
    <span class="badge badge-danger" id="unread-count"></span>
</a>

<div id="notif-col" class="notif-col">
    <div class="popover d-flex flex-column bs-popover-bottom show notif-overlay">
        <div class="arrow align-self-end"></div>
        <div class="popover-header d-flex flex-row align-items-center">
            <h6>Notifications</h6>
            <a href="#" class="ml-auto"><i class="fas fa-cog ml-1"></i></a>
        </div>
        <div class="popover-body" id="notif-scroll">
            <div id="notif-list"></div>
            <div id="notif-loader" class="load-bar mb-3">
                <div class="inner"></div>
                <div class="inner ghost"></div>
            </div>
        </div>
        <!-- NOTIFICATIONS ENDS -->
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {

        // HTML Elements
        const notifLoader = $("#notif-loader");
        const notifList = document.getElementById("notif-list");
        const unreadCount = document.getElementById("unread-count");

        let offset = 0;
        let loading = true;
        let unread = 0;
        let loadMore = true;

        // Get the current logged in user
        const user = Authentication.getUser();

        // Start the get of new notifications
        getNotifications();

        // Subscribe to the pusher channel
        let pusher = PusherInst.pusher();
        let notifChannel = pusher.subscribe(`notif-to-${user.id}`);
        notifChannel.bind("new-notif", newNotificationHandler);

        // Make a new data displayer
        const dataDisplayer = new DataDisplayer();
        dataDisplayer.setParent(notifList);



        function getNotifications() {
            toggleNotifLoader(true);

            fetch(`../requests/notifications/${offset}`).then(res => {
                return res.json();
            }).then(data => {

                offset++;
                let { notifs } = data;
                if (notifs.length === 0) {
                    // Stop the loading completely as there are no more notifications
                    // for the user
                    loadMore = false;
                    toggleNotifLoader(false);
                    return;
                }

                // Grab the notification array and count the unread messages
                unread = notifs.reduce((count, item) => parseInt(item.isRead) === 0 ? count + 1 : count + 0, unread);

                // Display the unread messages
                unreadCount.innerText = unread > 99 ? "99+" : unread;

                // Start displaying the string for each notification
                notifs.forEach(notif => {
                    let unread = parseInt(notif.isRead) === 0 ? 'notification-unread' : '';
                    let htmlString = `
                    <a href="${notif.link}&notif_id=${notif.id}" class="notification-link">
                        <div class="notification d-flex flex-row align-items-center ${unread}">
                            <img src="${notif.user_from.display_pic}" class="notif-profile-pic" alt="">
                            <p><span class="notif-profile-name">${notif.user_from.name}</span> ${notif.message}</p>
                            <div class="time-icon">
                                <i class="${notif.icon}"></i>
                                <span class="time-text">${notif.time}</span>
                            </div>
                        </div>
                    </a>`;

                    notifList.innerHTML += htmlString;
                });

                toggleNotifLoader(false);
            });
        }

        function toggleNotifLoader(bool) {
            if (bool) {
                loading = true;
                notifLoader.fadeIn();
            }
            else {
                loading = false;
                notifLoader.fadeOut();
            }
        }

        document.getElementById("notif-scroll").addEventListener("scroll", notifScroll);

        function notifScroll(e) {
            // If there are no notifications currently loading
            // and we are allowed to load more
            if (!loading && loadMore) {
                const { scrollTop, scrollHeight, clientHeight } = this;
                // If the scroll is lower
                if (scrollTop > scrollHeight - clientHeight - 10) {
                    getNotifications();
                }
            }
        }
    });
</script>